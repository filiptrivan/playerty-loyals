// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlayertyLoyals.Infrastructure;

#nullable disable

namespace PlayertyLoyals.Infrastructure.Migrations
{
    [DbContext(typeof(PlayertyApplicationDbContext))]
    [Migration("20241220030052_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.BusinessSystem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreateUserEndpoint")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GetDiscountCategoriesEndpoint")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("GetTransactionsEndpoint")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatePointsInterval")
                        .HasColumnType("int");

                    b.Property<bool?>("UpdatePointsScheduledTaskIsPaused")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatePointsStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUserGroupEndpoint")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("BusinessSystem");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.BusinessSystemTier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessSystemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("TierId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSystemId");

                    b.HasIndex("TierId");

                    b.ToTable("BusinessSystemTier");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.BusinessSystemTierDiscountProductGroup", b =>
                {
                    b.Property<long>("BusinessSystemTierId")
                        .HasColumnType("bigint");

                    b.Property<long>("DiscountProductGroupId")
                        .HasColumnType("bigint");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.HasKey("BusinessSystemTierId", "DiscountProductGroupId");

                    b.HasIndex("DiscountProductGroupId");

                    b.ToTable("BusinessSystemTierDiscountProductGroup");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.BusinessSystemUpdatePointsScheduledTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessSystemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsManual")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TransactionsFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TransactionsTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSystemId");

                    b.ToTable("BusinessSystemUpdatePointsScheduledTask");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.DiscountProductGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessSystemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSystemId");

                    b.ToTable("DiscountProductGroup");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("EmailBody")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Notification");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Notification");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("LogoImage")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("PointsMultiplier")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("PrimaryColor")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("ProductsRecommendationEndpoint")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Partner");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("PartnerPermission");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("PartnerRole");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerRolePartnerPermission", b =>
                {
                    b.Property<int>("PartnerRoleId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerPermissionId")
                        .HasColumnType("int");

                    b.HasKey("PartnerRoleId", "PartnerPermissionId");

                    b.HasIndex("PartnerPermissionId");

                    b.ToTable("PartnerRolePartnerPermission");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int?>("TierId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.HasIndex("TierId");

                    b.HasIndex("UserId");

                    b.ToTable("PartnerUser");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerUserPartnerNotification", b =>
                {
                    b.Property<long>("PartnerNotificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("PartnerUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsMarkedAsRead")
                        .HasColumnType("bit");

                    b.HasKey("PartnerNotificationId", "PartnerUserId");

                    b.HasIndex("PartnerUserId");

                    b.ToTable("PartnerUserPartnerNotification");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerUserPartnerRole", b =>
                {
                    b.Property<int>("PartnerRoleId")
                        .HasColumnType("int");

                    b.Property<long>("PartnerUserId")
                        .HasColumnType("bigint");

                    b.HasKey("PartnerRoleId", "PartnerUserId");

                    b.HasIndex("PartnerUserId");

                    b.ToTable("PartnerUserPartnerRole");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerUserSegmentation", b =>
                {
                    b.Property<long>("PartnerUserThatHasFilledSegmentationId")
                        .HasColumnType("bigint");

                    b.Property<int>("AlreadyFilledSegmentationId")
                        .HasColumnType("int");

                    b.HasKey("PartnerUserThatHasFilledSegmentationId", "AlreadyFilledSegmentationId");

                    b.HasIndex("AlreadyFilledSegmentationId");

                    b.ToTable("PartnerUserSegmentation");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerUserSegmentationItem", b =>
                {
                    b.Property<long>("PartnerUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CheckedSegmentationItemId")
                        .HasColumnType("bigint");

                    b.HasKey("PartnerUserId", "CheckedSegmentationItemId");

                    b.HasIndex("CheckedSegmentationItemId");

                    b.ToTable("PartnerUserSegmentationItem");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.Segmentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("PointsForTheFirstTimeFill")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("Segmentation");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.SegmentationItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("SegmentationId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SegmentationId");

                    b.ToTable("SegmentationItem");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.Tier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("ValidFrom")
                        .HasColumnType("int");

                    b.Property<int>("ValidTo")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("Tier");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BoughtAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("BusinessSystemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("PartnerUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(16,2)");

                    b.Property<string>("ProductCategoryImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProductCategoryName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSystemId");

                    b.HasIndex("PartnerUserId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.UserExtended", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("HasLoggedInWithExternalProvider")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfFailedAttemptsInARow")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GenderId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.UserNotification", b =>
                {
                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsMarkedAsRead")
                        .HasColumnType("bit");

                    b.HasKey("NotificationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotification");
                });

            modelBuilder.Entity("Spider.Security.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Spider.Security.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Spider.Security.Entities.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("Spider.Security.Entities.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Spider.Shared.Entities.ScheduledTaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ScheduledTaskType");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerNotification", b =>
                {
                    b.HasBaseType("PlayertyLoyals.Business.Entities.Notification");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.HasIndex("PartnerId");

                    b.HasDiscriminator().HasValue("PartnerNotification");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.BusinessSystem", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.Partner", "Partner")
                        .WithMany("BusinessSystems")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.BusinessSystemTier", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.BusinessSystem", "BusinessSystem")
                        .WithMany("BusinessSystemTiers")
                        .HasForeignKey("BusinessSystemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PlayertyLoyals.Business.Entities.Tier", "Tier")
                        .WithMany("BusinessSystemTiers")
                        .HasForeignKey("TierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BusinessSystem");

                    b.Navigation("Tier");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.BusinessSystemTierDiscountProductGroup", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.BusinessSystemTier", "BusinessSystemTier")
                        .WithMany("BusinessSystemTierDiscountProductGroups")
                        .HasForeignKey("BusinessSystemTierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayertyLoyals.Business.Entities.DiscountProductGroup", "DiscountProductGroup")
                        .WithMany("BusinessSystemTierDiscountProductGroups")
                        .HasForeignKey("DiscountProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessSystemTier");

                    b.Navigation("DiscountProductGroup");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.BusinessSystemUpdatePointsScheduledTask", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.BusinessSystem", "BusinessSystem")
                        .WithMany("BusinessSystemUpdatePointsScheduledTasks")
                        .HasForeignKey("BusinessSystemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BusinessSystem");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.DiscountProductGroup", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.BusinessSystem", "BusinessSystem")
                        .WithMany("DiscountProductGroups")
                        .HasForeignKey("BusinessSystemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BusinessSystem");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerRole", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.Partner", "Partner")
                        .WithMany("PartnerRoles")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerRolePartnerPermission", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.PartnerPermission", "PartnerPermission")
                        .WithMany()
                        .HasForeignKey("PartnerPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayertyLoyals.Business.Entities.PartnerRole", "PartnerRole")
                        .WithMany()
                        .HasForeignKey("PartnerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartnerPermission");

                    b.Navigation("PartnerRole");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerUser", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.Partner", "Partner")
                        .WithMany("PartnerUsers")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PlayertyLoyals.Business.Entities.Tier", "Tier")
                        .WithMany("PartnerUsers")
                        .HasForeignKey("TierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PlayertyLoyals.Business.Entities.UserExtended", "User")
                        .WithMany("PartnerUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Partner");

                    b.Navigation("Tier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerUserPartnerNotification", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.PartnerNotification", "PartnerNotification")
                        .WithMany()
                        .HasForeignKey("PartnerNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayertyLoyals.Business.Entities.PartnerUser", "PartnerUser")
                        .WithMany()
                        .HasForeignKey("PartnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartnerNotification");

                    b.Navigation("PartnerUser");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerUserPartnerRole", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.PartnerRole", "PartnerRole")
                        .WithMany()
                        .HasForeignKey("PartnerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayertyLoyals.Business.Entities.PartnerUser", "PartnerUser")
                        .WithMany()
                        .HasForeignKey("PartnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartnerRole");

                    b.Navigation("PartnerUser");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerUserSegmentation", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.Segmentation", "AlreadyFilledSegmentation")
                        .WithMany()
                        .HasForeignKey("AlreadyFilledSegmentationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayertyLoyals.Business.Entities.PartnerUser", "PartnerUserThatHasFilledSegmentation")
                        .WithMany()
                        .HasForeignKey("PartnerUserThatHasFilledSegmentationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlreadyFilledSegmentation");

                    b.Navigation("PartnerUserThatHasFilledSegmentation");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerUserSegmentationItem", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.SegmentationItem", "CheckedSegmentationItem")
                        .WithMany()
                        .HasForeignKey("CheckedSegmentationItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayertyLoyals.Business.Entities.PartnerUser", "PartnerUser")
                        .WithMany()
                        .HasForeignKey("PartnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckedSegmentationItem");

                    b.Navigation("PartnerUser");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.Segmentation", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.Partner", "Partner")
                        .WithMany("Segmentations")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.SegmentationItem", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.Segmentation", "Segmentation")
                        .WithMany("SegmentationItems")
                        .HasForeignKey("SegmentationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Segmentation");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.Tier", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.Partner", "Partner")
                        .WithMany("Tiers")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.Transaction", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.BusinessSystem", "BusinessSystem")
                        .WithMany("Transactions")
                        .HasForeignKey("BusinessSystemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PlayertyLoyals.Business.Entities.PartnerUser", "PartnerUser")
                        .WithMany("Transactions")
                        .HasForeignKey("PartnerUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BusinessSystem");

                    b.Navigation("PartnerUser");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.UserExtended", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.UserNotification", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayertyLoyals.Business.Entities.UserExtended", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Spider.Security.Entities.RolePermission", b =>
                {
                    b.HasOne("Spider.Security.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spider.Security.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Spider.Security.Entities.UserRole", b =>
                {
                    b.HasOne("Spider.Security.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayertyLoyals.Business.Entities.UserExtended", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerNotification", b =>
                {
                    b.HasOne("PlayertyLoyals.Business.Entities.Partner", "Partner")
                        .WithMany("PartnerNotifications")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.BusinessSystem", b =>
                {
                    b.Navigation("BusinessSystemTiers");

                    b.Navigation("BusinessSystemUpdatePointsScheduledTasks");

                    b.Navigation("DiscountProductGroups");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.BusinessSystemTier", b =>
                {
                    b.Navigation("BusinessSystemTierDiscountProductGroups");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.DiscountProductGroup", b =>
                {
                    b.Navigation("BusinessSystemTierDiscountProductGroups");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.Partner", b =>
                {
                    b.Navigation("BusinessSystems");

                    b.Navigation("PartnerNotifications");

                    b.Navigation("PartnerRoles");

                    b.Navigation("PartnerUsers");

                    b.Navigation("Segmentations");

                    b.Navigation("Tiers");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.PartnerUser", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.Segmentation", b =>
                {
                    b.Navigation("SegmentationItems");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.Tier", b =>
                {
                    b.Navigation("BusinessSystemTiers");

                    b.Navigation("PartnerUsers");
                });

            modelBuilder.Entity("PlayertyLoyals.Business.Entities.UserExtended", b =>
                {
                    b.Navigation("PartnerUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
