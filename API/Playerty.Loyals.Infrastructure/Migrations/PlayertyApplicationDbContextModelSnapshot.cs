// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Playerty.Loyals.Infrastructure;

#nullable disable

namespace Playerty.Loyals.Infrastructure.Migrations
{
    [DbContext(typeof(PlayertyApplicationDbContext))]
    partial class PlayertyApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NotificationUserExtended", b =>
                {
                    b.Property<long>("NotificationsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("NotificationsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("NotificationUserExtended");
                });

            modelBuilder.Entity("PartnerNotificationPartnerUser", b =>
                {
                    b.Property<long>("PartnerNotificationsId")
                        .HasColumnType("bigint");

                    b.Property<long>("PartnerUsersId")
                        .HasColumnType("bigint");

                    b.HasKey("PartnerNotificationsId", "PartnerUsersId");

                    b.HasIndex("PartnerUsersId");

                    b.ToTable("PartnerNotificationPartnerUser");
                });

            modelBuilder.Entity("PartnerPermissionPartnerRole", b =>
                {
                    b.Property<int>("PartnerPermissionsId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerRolesId")
                        .HasColumnType("int");

                    b.HasKey("PartnerPermissionsId", "PartnerRolesId");

                    b.HasIndex("PartnerRolesId");

                    b.ToTable("PartnerPermissionPartnerRole");
                });

            modelBuilder.Entity("PartnerRolePartnerUser", b =>
                {
                    b.Property<int>("PartnerRolesId")
                        .HasColumnType("int");

                    b.Property<long>("PartnerUsersId")
                        .HasColumnType("bigint");

                    b.HasKey("PartnerRolesId", "PartnerUsersId");

                    b.HasIndex("PartnerUsersId");

                    b.ToTable("PartnerRolePartnerUser");
                });

            modelBuilder.Entity("PartnerUserSegmentation", b =>
                {
                    b.Property<int>("AlreadyFilledSegmentationsId")
                        .HasColumnType("int");

                    b.Property<long>("PartnerUsersThatHasFilledSegmentationId")
                        .HasColumnType("bigint");

                    b.HasKey("AlreadyFilledSegmentationsId", "PartnerUsersThatHasFilledSegmentationId");

                    b.HasIndex("PartnerUsersThatHasFilledSegmentationId");

                    b.ToTable("PartnerUserSegmentation");
                });

            modelBuilder.Entity("PartnerUserSegmentationItem", b =>
                {
                    b.Property<long>("CheckedSegmentationItemsId")
                        .HasColumnType("bigint");

                    b.Property<long>("PartnerUsersId")
                        .HasColumnType("bigint");

                    b.HasKey("CheckedSegmentationItemsId", "PartnerUsersId");

                    b.HasIndex("PartnerUsersId");

                    b.ToTable("PartnerUserSegmentationItem");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("PermissionRole");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.BusinessSystem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreateUserEndpoint")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GetDiscountCategoriesEndpoint")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("GetTransactionsEndpoint")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatePointsInterval")
                        .HasColumnType("int");

                    b.Property<bool?>("UpdatePointsScheduledTaskIsPaused")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatePointsStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUserGroupEndpoint")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("BusinessSystem");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.BusinessSystemTier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessSystemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BusinessSystemId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("TierId")
                        .HasColumnType("int");

                    b.Property<int?>("TierId1")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSystemId");

                    b.HasIndex("BusinessSystemId1");

                    b.HasIndex("TierId");

                    b.HasIndex("TierId1");

                    b.ToTable("BusinessSystemTier");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.BusinessSystemTierDiscountProductGroup", b =>
                {
                    b.Property<long>("BusinessSystemTierId")
                        .HasColumnType("bigint");

                    b.Property<long>("DiscountProductGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BusinessSystemTierId1")
                        .HasColumnType("bigint");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<long?>("DiscountProductGroupId1")
                        .HasColumnType("bigint");

                    b.HasKey("BusinessSystemTierId", "DiscountProductGroupId");

                    b.HasIndex("BusinessSystemTierId1");

                    b.HasIndex("DiscountProductGroupId");

                    b.HasIndex("DiscountProductGroupId1");

                    b.ToTable("BusinessSystemTierDiscountProductGroup");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.BusinessSystemUpdatePointsScheduledTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessSystemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BusinessSystemId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsManual")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TransactionsFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TransactionsTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSystemId");

                    b.HasIndex("BusinessSystemId1");

                    b.ToTable("BusinessSystemUpdatePointsScheduledTask");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.DiscountProductGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessSystemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSystemId");

                    b.ToTable("DiscountProductGroup");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("EmailBody")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Notification");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Notification");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("LogoImage")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("PointsMultiplier")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("PrimaryColor")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("ProductsRecommendationEndpoint")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Partner");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.PartnerPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("PartnerPermission");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.PartnerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int?>("PartnerId1")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PartnerId1");

                    b.ToTable("PartnerRole");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.PartnerUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int?>("PartnerId1")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int?>("TierId")
                        .HasColumnType("int");

                    b.Property<long?>("UserExtendedId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PartnerId1");

                    b.HasIndex("TierId");

                    b.HasIndex("UserExtendedId");

                    b.HasIndex("UserId");

                    b.ToTable("PartnerUser");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.Segmentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("PointsForTheFirstTimeFill")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("Segmentation");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.SegmentationItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("SegmentationId")
                        .HasColumnType("int");

                    b.Property<int?>("SegmentationId1")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SegmentationId");

                    b.HasIndex("SegmentationId1");

                    b.ToTable("SegmentationItem");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.Tier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int?>("PartnerId1")
                        .HasColumnType("int");

                    b.Property<int>("ValidFrom")
                        .HasColumnType("int");

                    b.Property<int>("ValidTo")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PartnerId1");

                    b.ToTable("Tier");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.UserExtended", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("HasLoggedInWithExternalProvider")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfFailedAttemptsInARow")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GenderId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Soft.Generator.Security.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Soft.Generator.Security.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Soft.Generator.Security.Entities.RoleUser", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.PartnerNotification", b =>
                {
                    b.HasBaseType("Playerty.Loyals.Business.Entities.Notification");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int?>("PartnerId1")
                        .HasColumnType("int");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PartnerId1");

                    b.HasDiscriminator().HasValue("PartnerNotification");
                });

            modelBuilder.Entity("NotificationUserExtended", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.Notification", null)
                        .WithMany()
                        .HasForeignKey("NotificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Playerty.Loyals.Business.Entities.UserExtended", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartnerNotificationPartnerUser", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.PartnerNotification", null)
                        .WithMany()
                        .HasForeignKey("PartnerNotificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Playerty.Loyals.Business.Entities.PartnerUser", null)
                        .WithMany()
                        .HasForeignKey("PartnerUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartnerPermissionPartnerRole", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.PartnerPermission", null)
                        .WithMany()
                        .HasForeignKey("PartnerPermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Playerty.Loyals.Business.Entities.PartnerRole", null)
                        .WithMany()
                        .HasForeignKey("PartnerRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartnerRolePartnerUser", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.PartnerRole", null)
                        .WithMany()
                        .HasForeignKey("PartnerRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Playerty.Loyals.Business.Entities.PartnerUser", null)
                        .WithMany()
                        .HasForeignKey("PartnerUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartnerUserSegmentation", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.Segmentation", null)
                        .WithMany()
                        .HasForeignKey("AlreadyFilledSegmentationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Playerty.Loyals.Business.Entities.PartnerUser", null)
                        .WithMany()
                        .HasForeignKey("PartnerUsersThatHasFilledSegmentationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartnerUserSegmentationItem", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.SegmentationItem", null)
                        .WithMany()
                        .HasForeignKey("CheckedSegmentationItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Playerty.Loyals.Business.Entities.PartnerUser", null)
                        .WithMany()
                        .HasForeignKey("PartnerUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("Soft.Generator.Security.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Soft.Generator.Security.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.BusinessSystem", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.BusinessSystemTier", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.BusinessSystem", "BusinessSystem")
                        .WithMany()
                        .HasForeignKey("BusinessSystemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Playerty.Loyals.Business.Entities.BusinessSystem", null)
                        .WithMany("BusinessSystemTiers")
                        .HasForeignKey("BusinessSystemId1");

                    b.HasOne("Playerty.Loyals.Business.Entities.Tier", "Tier")
                        .WithMany()
                        .HasForeignKey("TierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Playerty.Loyals.Business.Entities.Tier", null)
                        .WithMany("BusinessSystemTiers")
                        .HasForeignKey("TierId1");

                    b.Navigation("BusinessSystem");

                    b.Navigation("Tier");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.BusinessSystemTierDiscountProductGroup", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.BusinessSystemTier", "BusinessSystemTier")
                        .WithMany()
                        .HasForeignKey("BusinessSystemTierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Playerty.Loyals.Business.Entities.BusinessSystemTier", null)
                        .WithMany("BusinessSystemTierDiscountProductGroups")
                        .HasForeignKey("BusinessSystemTierId1");

                    b.HasOne("Playerty.Loyals.Business.Entities.DiscountProductGroup", "DiscountProductGroup")
                        .WithMany()
                        .HasForeignKey("DiscountProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Playerty.Loyals.Business.Entities.DiscountProductGroup", null)
                        .WithMany("BusinessSystemTierDiscountProductGroups")
                        .HasForeignKey("DiscountProductGroupId1");

                    b.Navigation("BusinessSystemTier");

                    b.Navigation("DiscountProductGroup");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.BusinessSystemUpdatePointsScheduledTask", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.BusinessSystem", "BusinessSystem")
                        .WithMany()
                        .HasForeignKey("BusinessSystemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Playerty.Loyals.Business.Entities.BusinessSystem", null)
                        .WithMany("BusinessSystemUpdatePointsScheduledTasks")
                        .HasForeignKey("BusinessSystemId1");

                    b.Navigation("BusinessSystem");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.DiscountProductGroup", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.BusinessSystem", "BusinessSystem")
                        .WithMany()
                        .HasForeignKey("BusinessSystemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BusinessSystem");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.PartnerRole", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Playerty.Loyals.Business.Entities.Partner", null)
                        .WithMany("PartnerRoles")
                        .HasForeignKey("PartnerId1");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.PartnerUser", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Playerty.Loyals.Business.Entities.Partner", null)
                        .WithMany("Users")
                        .HasForeignKey("PartnerId1");

                    b.HasOne("Playerty.Loyals.Business.Entities.Tier", "Tier")
                        .WithMany("PartnerUsers")
                        .HasForeignKey("TierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Playerty.Loyals.Business.Entities.UserExtended", null)
                        .WithMany("PartnerUsers")
                        .HasForeignKey("UserExtendedId");

                    b.HasOne("Playerty.Loyals.Business.Entities.UserExtended", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Partner");

                    b.Navigation("Tier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.Segmentation", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.SegmentationItem", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.Segmentation", "Segmentation")
                        .WithMany()
                        .HasForeignKey("SegmentationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Playerty.Loyals.Business.Entities.Segmentation", null)
                        .WithMany("SegmentationItems")
                        .HasForeignKey("SegmentationId1");

                    b.Navigation("Segmentation");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.Tier", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Playerty.Loyals.Business.Entities.Partner", null)
                        .WithMany("Tiers")
                        .HasForeignKey("PartnerId1");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.UserExtended", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Soft.Generator.Security.Entities.RoleUser", b =>
                {
                    b.HasOne("Soft.Generator.Security.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Playerty.Loyals.Business.Entities.UserExtended", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.PartnerNotification", b =>
                {
                    b.HasOne("Playerty.Loyals.Business.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Playerty.Loyals.Business.Entities.Partner", null)
                        .WithMany("PartnerNotifications")
                        .HasForeignKey("PartnerId1");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.BusinessSystem", b =>
                {
                    b.Navigation("BusinessSystemTiers");

                    b.Navigation("BusinessSystemUpdatePointsScheduledTasks");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.BusinessSystemTier", b =>
                {
                    b.Navigation("BusinessSystemTierDiscountProductGroups");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.DiscountProductGroup", b =>
                {
                    b.Navigation("BusinessSystemTierDiscountProductGroups");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.Partner", b =>
                {
                    b.Navigation("PartnerNotifications");

                    b.Navigation("PartnerRoles");

                    b.Navigation("Tiers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.Segmentation", b =>
                {
                    b.Navigation("SegmentationItems");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.Tier", b =>
                {
                    b.Navigation("BusinessSystemTiers");

                    b.Navigation("PartnerUsers");
                });

            modelBuilder.Entity("Playerty.Loyals.Business.Entities.UserExtended", b =>
                {
                    b.Navigation("PartnerUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
